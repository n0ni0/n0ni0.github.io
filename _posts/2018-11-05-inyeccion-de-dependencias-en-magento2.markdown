---
layout: post
title: Inyecci√≥n de dependencias en Magento 2
date: 05/11/2018
description: ¬øQu√© es la Inyecci√≥n de dependencias? La inyecci√≥n de dependencias es un patr√≥n de dise√±o orientado a objetos en el que se suministran objetos a una clase en lugar de ser la propia clase la que cree dichos objetos. # Add post description (optional)
img: di-m2/di_m2.png # Add image post (optional)
tags: [Magento2, Tutoriales] # add tag
---

### ¬øQu√© es la Inyecci√≥n de dependencias? ###
La inyecci√≥n de dependencias es un patr√≥n de dise√±o orientado a objetos en el que se suministran objetos a una clase en lugar de ser la propia clase la que cree dichos objetos.

Entre las principales ventajas cabe destacar:

Permite que nuestro c√≥digo sea m√°s flexible ya que hace que una clase pueda cambiar sus dependencias sin necesidad de cambiar su c√≥digo.
Vemos de forma m√°s r√°pida y ordenada todas las dependencias al tenerlas todas en nuestro constructor y no desperdigadas por el resto del c√≥digo.
Dejamos de llamar a cada clase que necesitemos con ‚Äúnew‚Äù y usamos objetos √≥ factor√≠as en el constructor.
Cuando creamos un objeto ya tenemos todas las dependencias que necesitamos.
En Magento 1 los objetos eran construidos con la clase ‚ÄúMage‚Äù, en Magento 2 usamos la inyecci√≥n de dependencias y el Object Manager, consiguiendo un desacoplo del c√≥digo entre otras muchas mejoras.

Magento 2 usa dos tipos de inyecci√≥n de dependencias la inyecci√≥n por constructor y la inyecci√≥n por m√©todos.

Usaremos el mismo ejemplo que encontramos en la documentaci√≥n oficial:

```php
namespace Magento\Backend\Model\Menu;
class Builder
{
    /**
     * @param \Magento\Backend\Model\Menu\Item\Factory $menuItemFactory
     * @param \Magento\Backend\Model\Menu $menu
     */
    public function __construct(
        Magento\Backend\Model\Menu\Item\Factory $menuItemFactory,  // Service dependency
        Magento\Backend\Model\Menu $menu  // Service dependency
    ) {
        $this->_itemFactory = $menuItemFactory;
        $this->_menu = $menu;
    }
 
    public function processCommand(\Magento\Backend\Model\Menu\Builder\CommandAbstract $command) // API param
    {
        // processCommand Code
    }
}
```

En el ejemplo podemos observar como la clase Builder declara sus dependencias para menuFactory y para menu usando la inyecci√≥n por constructor. Es el m√©todo m√°s com√∫n.

Para el m√©todo processComand pasa la inyecci√≥n de dependencias como par√°metro. Este tipo de inyecci√≥n se suele usar cuando la dependencia puede variar en cada llamada al m√©todo.

### ¬øQu√© es Object Manager y para que sirve? ###
El Object Manager como la mayor√≠a de las clases en Magento 2, implementa una interfaz, en este caso Magento\Framework\ObjectManagerInterface.

Object Manager es la clase hace funcionar la inyecci√≥n de dependencias autom√°tica en Magento 2.
Crea una instancia nueva de los objetos que le pasamos e implementa el patr√≥n de dise√±o singleton, controla la creaci√≥n de instancias de par√°metros (incluidos en todos los di.xml del proyecto) y tambi√©n modifica la instancia de objetos, puesto que usando una preference le podemos decir a magento que clase usar para instanciar un objeto.

Todas las dependencias de una clase son listadas como argumentos en el constructor. Cuando magento necesita una instancia de una clase √≥ una interfaz le pide al Object Manager que la cree.
En resumidas cuentas, el Object Manager es el contenedor de dependencias de Magento 2.

Crea una instancia de las dependencias para un nuevo objeto y se asegura de que cada objeto se cree solo una √∫nica vez.

Lo m√°s importante de todo, no debemos llamar al Object Manager directamente, debemos de usar la inyecci√≥n de dependencias. Magento en sus buenas pr√°cticas nos lo dice claramente. Si revisamos al core de Magento podemos ver llamadas directamente al Object Manager, como tambi√©n nos dicen en la documentaci√≥n, no debe de usarse como ejemplo y solo existen para compatibilidad con versiones anteriores por lo que en un futuro desaparecer√°n.

Para recopilar todas las dependencias que necesitamos inyectar en el Object Manager usamos los archivos di.xml que tenemos en cada m√≥dulo. Podemos tener un di.xml para cada √°rea permitiendo configuraciones diferentes seg√∫n el √°rea.

### Objetos inyectables y no inyectables ###
En Magento 2 tenemos dos grupos de objetos, lo que podemos inyectar y los que no.

Objetos no inyectables:
Son objetos que tienen una entidad, como por ejemplo los productos, usuarios, pedidos, ‚Ä¶
Si necesitamos usar un objeto de este tipo no los podremos llamar usando Object Manager, tendremos que llamar a una factor√≠a.

Objetos inyectables:
Pueden ser llamados como servicios o objetos y muestran sus dependencias en sus constructores y son creados por el Object Manager √≥ usando la configuraci√≥n por archivos di.xml.

### ¬øC√≥mo localizar las dependencias que necesito? ###
Una manera ser√≠a mirar en el directorio API del m√≥dulo que vamos a llamar en nuestro constructor. Las clases que encontremos en esta carpeta han sido creadas espec√≠ficamente para llamarlas desde otros m√≥dulos y suelen ser m√°s estables que el resto de clases del m√≥dulo.
Con el tiempo a base de llamar a las dependencias cada vez que creamos un constructor iremos sabiendo a cuales tenemos que llamar, esto nos pasa con cualquier CMS o framework que empecemos a usar, no hay por qu√© preocuparse, solo tener paciencia y siempre tendremos a nuestro amigo stack overflow üôÇ

Como √∫ltima recomendaci√≥n para cuando estemos desarrollando y empecemos a ver que nuestro constructor se est√° haciendo sumamente enorme es hora de pararnos, ver qu√© podr√≠amos sacar a otra clase e intentar refactorizarlo, nos puede ahorrar bastantes quebraderos de cabeza.

